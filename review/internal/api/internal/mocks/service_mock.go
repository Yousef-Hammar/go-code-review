// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Yousef-Hammar/go-code-review/coupon_service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// ApplyCoupon provides a mock function with given fields: _a0, _a1, _a2
func (_m *Service) ApplyCoupon(_a0 context.Context, _a1 domain.Basket, _a2 string) (*domain.Basket, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ApplyCoupon")
	}

	var r0 *domain.Basket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Basket, string) (*domain.Basket, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Basket, string) *domain.Basket); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Basket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Basket, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ApplyCoupon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyCoupon'
type Service_ApplyCoupon_Call struct {
	*mock.Call
}

// ApplyCoupon is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Basket
//   - _a2 string
func (_e *Service_Expecter) ApplyCoupon(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Service_ApplyCoupon_Call {
	return &Service_ApplyCoupon_Call{Call: _e.mock.On("ApplyCoupon", _a0, _a1, _a2)}
}

func (_c *Service_ApplyCoupon_Call) Run(run func(_a0 context.Context, _a1 domain.Basket, _a2 string)) *Service_ApplyCoupon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Basket), args[2].(string))
	})
	return _c
}

func (_c *Service_ApplyCoupon_Call) Return(_a0 *domain.Basket, _a1 error) *Service_ApplyCoupon_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ApplyCoupon_Call) RunAndReturn(run func(context.Context, domain.Basket, string) (*domain.Basket, error)) *Service_ApplyCoupon_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCoupon provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Service) CreateCoupon(_a0 context.Context, _a1 int, _a2 string, _a3 int) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateCoupon")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, int) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_CreateCoupon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCoupon'
type Service_CreateCoupon_Call struct {
	*mock.Call
}

// CreateCoupon is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 string
//   - _a3 int
func (_e *Service_Expecter) CreateCoupon(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *Service_CreateCoupon_Call {
	return &Service_CreateCoupon_Call{Call: _e.mock.On("CreateCoupon", _a0, _a1, _a2, _a3)}
}

func (_c *Service_CreateCoupon_Call) Run(run func(_a0 context.Context, _a1 int, _a2 string, _a3 int)) *Service_CreateCoupon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *Service_CreateCoupon_Call) Return(_a0 error) *Service_CreateCoupon_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_CreateCoupon_Call) RunAndReturn(run func(context.Context, int, string, int) error) *Service_CreateCoupon_Call {
	_c.Call.Return(run)
	return _c
}

// GetCoupons provides a mock function with given fields: _a0, _a1
func (_m *Service) GetCoupons(_a0 context.Context, _a1 []string) ([]domain.Coupon, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCoupons")
	}

	var r0 []domain.Coupon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]domain.Coupon, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []domain.Coupon); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Coupon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetCoupons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCoupons'
type Service_GetCoupons_Call struct {
	*mock.Call
}

// GetCoupons is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []string
func (_e *Service_Expecter) GetCoupons(_a0 interface{}, _a1 interface{}) *Service_GetCoupons_Call {
	return &Service_GetCoupons_Call{Call: _e.mock.On("GetCoupons", _a0, _a1)}
}

func (_c *Service_GetCoupons_Call) Run(run func(_a0 context.Context, _a1 []string)) *Service_GetCoupons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *Service_GetCoupons_Call) Return(_a0 []domain.Coupon, _a1 error) *Service_GetCoupons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetCoupons_Call) RunAndReturn(run func(context.Context, []string) ([]domain.Coupon, error)) *Service_GetCoupons_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
